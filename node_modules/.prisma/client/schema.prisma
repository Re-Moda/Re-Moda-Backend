datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  username             String        @unique
  password_hash        String
  google_id            String?
  coin_balance         Int           @default(0)
  security_question    String
  security_answer_hash String
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  role                 String        @default("user")
  avatar_url           String?
  avatar_key           String?
  closets              Closet[]
  categories           Category[]
  outfits              Outfit[]
  chatSessions         ChatSession[]
  mcpSessions          MCPSession[]
}

model Category {
  id         Int      @id @default(autoincrement())
  user_id    Int
  title      String
  created_at DateTime @default(now())

  user          User           @relation(fields: [user_id], references: [id])
  clothingItems ClothingItem[]

  @@unique([user_id, title])
}

model Closet {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User           @relation(fields: [user_id], references: [id])
  clothingItems ClothingItem[]
}

model S3Bucket {
  name       String   @id
  region     String
  created_at DateTime @default(now())

  clothingItems ClothingItem[] @relation("BucketClothingItems")
  outfits       Outfit[]       @relation("BucketOutfits")
}

model ClothingItem {
  id                 Int       @id @default(autoincrement())
  closet_id          Int
  category_id        Int
  bucket_name        String
  image_key          String
  label              String
  description        String
  ai_tag             String? // AI-generated tag
  original_image_url String? // Original image URL
  wear_count         Int       @default(0)
  last_worn_at       DateTime?
  is_unused          Boolean   @default(false)
  unused_at          DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  closet              Closet               @relation(fields: [closet_id], references: [id])
  category            Category             @relation(fields: [category_id], references: [id])
  bucket              S3Bucket             @relation("BucketClothingItems", fields: [bucket_name], references: [name])
  outfitClothingItems OutfitClothingItem[]
}

model Outfit {
  id             Int       @id @default(autoincrement())
  user_id        Int
  bucket_name    String?
  image_key      String?
  title          String
  is_favorite    Boolean   @default(false)
  is_recurring   Boolean   @default(false)
  wear_count     Int       @default(0)
  last_worn_at   DateTime?
  mcp_session_id Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  user                User                 @relation(fields: [user_id], references: [id])
  bucket              S3Bucket?            @relation("BucketOutfits", fields: [bucket_name], references: [name])
  mcpSession          MCPSession?          @relation(fields: [mcp_session_id], references: [id])
  outfitClothingItems OutfitClothingItem[]
  mcpSessionOutfits   MCPSessionOutfit[]
}

model OutfitClothingItem {
  outfit_id        Int
  clothing_item_id Int
  added_at         DateTime @default(now())

  outfit       Outfit       @relation(fields: [outfit_id], references: [id])
  clothingItem ClothingItem @relation(fields: [clothing_item_id], references: [id])

  @@id([outfit_id, clothing_item_id])
}

model ChatSession {
  id         Int      @id @default(autoincrement())
  user_id    Int
  started_at DateTime @default(now())

  user     User          @relation(fields: [user_id], references: [id])
  messages ChatMessage[]
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  session_id Int
  role       String
  content    String
  sent_at    DateTime @default(now())

  session ChatSession @relation(fields: [session_id], references: [id])
}

model MCPSession {
  id             Int       @id @default(autoincrement())
  user_id        Int
  prompt_payload Json
  status         String    @default("pending")
  created_at     DateTime  @default(now())
  completed_at   DateTime?

  user              User               @relation(fields: [user_id], references: [id])
  outfits           Outfit[]
  mcpSessionOutfits MCPSessionOutfit[]
}

model MCPSessionOutfit {
  mcp_session_id Int
  outfit_id      Int
  added_at       DateTime @default(now())

  mcpSession MCPSession @relation(fields: [mcp_session_id], references: [id])
  outfit     Outfit     @relation(fields: [outfit_id], references: [id])

  @@id([mcp_session_id, outfit_id])
}
